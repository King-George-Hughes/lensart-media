"use client";

import { cn } from "@/lib/utils";
import Link from "next/link";
import { useSearchParams } from "next/navigation";
import React, { Suspense } from "react";
import LightBoxGallery from "./LightBoxGallery";
import useImages from "@/hooks/image/useImages";
import { Button } from "@/components/ui/button";

export const sortValues = [
  {
    name: "All",
    value: "",
  },
  {
    name: "Studio",
    value: "studio",
  },
  {
    name: "Wedding",
    value: "wedding",
  },
  {
    name: "Lifestyle",
    value: "lifestyle",
  },
];

const FilterGallery = () => {
  const searchParams = useSearchParams();
  const selectedValue = searchParams.get("gallery");

  const pageSize = 20;
  const { data, fetchNextPage, hasNextPage, isFetching, isFetchingNextPage } =
    useImages(pageSize);

  return (
    <div className="my-20 md:my-24">
      <div className="mb-5 text-center">
        <h3 className="text-3xl font-bold lg:text-4xl">
          Latest <span className="text-primary">Works</span>
        </h3>
        <div className="mx-auto my-5 h-[1.5px] w-[40px] bg-primary" />

        <div className="mx-auto mb-2 inline-flex items-center gap-2">
          {sortValues.map((sort) => (
            <Link
              href={`?gallery=${sort.value}`}
              className={cn(
                `${
                  selectedValue === sort.value
                    ? "border-b-[2px] border-b-primary"
                    : ""
                }`,
                "px-2 py-1 text-black/80",
              )}
              scroll={false}
            >
              {sort.name}
            </Link>
          ))}
        </div>
      </div>
      {/* <LightBoxGallery images={parallaxImages} filter={selectedValue || ""} /> */}

      {data?.pages.map((page, pageIndex) => (
        <React.Fragment key={pageIndex}>
          <LightBoxGallery images={page.images} filter={selectedValue || ""} />
        </React.Fragment>
      ))}

      <div className="mt-10">
        {isFetching && !isFetchingNextPage && <p>Loading more images...</p>}
        {!isFetchingNextPage && hasNextPage && (
          <Button onClick={() => fetchNextPage()}>Load More</Button>
        )}
        {isFetchingNextPage && <p>Loading...</p>}
      </div>
    </div>
  );
};

const FilterGalleryWrapper = () => {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <FilterGallery />
    </Suspense>
  );
};

export default FilterGalleryWrapper;
